*************
* 8 запрос: *
*************
Для заданного покупателя (выбирается из списка всех покупателей, содержащего фамилию, имя, отчество и дату рождения) сформировать в виде Word-документа отчёт,
включающий его персональные данные и таблицу со списком всех его покупок (совершённых за наличный и безналичный расчёт) за заданный период времени.
- О покупателе должна быть отображена следующая информация: ФИО, дата рождения, e-mail, телефон, серия и номер паспорта.
- Данные в списке покупок должны включать дату покупки, категорию товара, название фирмы-производителя, модель товара, сумму покупки и способ оплаты.
  Отсортировать список следующим образом: дата, категория товара, название фирмы, мо-дель товара.
Ограничение на максимальное время выполнения запроса:
Запрос для получения списка покупателей и дополнительных персональных данных, нуж-ных для отчёта:
? в приложении – 1830 мс;
? используя explain analyze – 1700 мс.
Запрос, получающий данные о покупателе, выбранном из списка:
? в приложении – 40 мс;
? используя explain analyze – 40 мс.
Запрос, получающий данные для таблицы:
? в приложении – 180 мс;
? используя explain analyze – 170 мс.
-------------------------------------------------------------------------------------------------------------------------------------------------------




8.1) Получение списка ФИО, Дата рождения

-- напишем запрос, берущий данные с А
	
select * from 
public.dblink('host=students.ami.nstu.ru dbname=risbd4 user=risbd4 password=ris14bd4',
		   'select id, surname || '' '' || name || '' '' || patronymic || '' '' || birthdate as info
		from initial.clients
		order by surname, name, patronymic, birthdate') 
as list_of_clients(id integer, info text);
	
"Function Scan on dblink list_of_clients  (cost=0.00..10.00 rows=1000 width=36) (actual time=4681.610..4728.870 rows=50000 loops=1)"


-------------
-- 4700 мс --
-------------
	

	
	
	
	
	
	
8.2) Выбор отдельного клиента

-- запрос на выбор 1-го клиента с сервера А

select * from 
public.dblink ('host=students.ami.nstu.ru dbname=risbd4 user=risbd4 password=ris14bd4',
				'select id, surname, name, patronymic, birthdate, email, phone, passport_series, passport_number
				from initial.clients
				where id = 25465')
as current_client(id integer, surname text, name text, patronymic text, birthdate date, email text, phone text, passport_series text, passport_number text)
	

"Function Scan on dblink current_client  (cost=0.00..10.00 rows=1000 width=232) (actual time=323.255..323.257 rows=1 loops=1)"

------------
-- 323 мс --
------------








8.3) Выбор информации о покупках
Таблицу со списком всех его покупок (совершённых за наличный и безналичный расчёт) за заданный период времени.
Данные в списке покупок должны включать дату покупки, категорию товара, название фирмы-производителя, модель товара, сумму покупки и способ оплаты.
Отсортировать список следующим образом: дата, категория товара, название фирмы, модель товара.

-- напишем запрос

(
	select orders_non_cash.on_sale_date as on_sale_date, categories.title as category, 
			companies.name as company, goods.model as model, orders_non_cash.sale_amount, payment_methods.title
	from orders_non_cash
	join goods on orders_non_cash.goods_id = goods.id
	join payment_methods on orders_non_cash.payment_method_id = payment_methods.id 
	join categories on goods.category_id = categories.id
	join companies on goods.company_id = companies.id
	where orders_non_cash.client_id = 25465 and orders_non_cash.on_sale_date between '01-01-1900' and '11-12-2999'
)
UNION
(
	select * from public.dblink('host=students.ami.nstu.ru dbname=risbd4 user=risbd4 password=ris14bd4',
	'
		set search_path to initial;
		select orders_cash.on_sale_date, categories.title, companies.name, goods.model, orders_cash.sale_amount, payment_methods.title
		from orders_cash
		join goods on orders_cash.goods_id = goods.id
		join payment_methods on orders_cash.payment_method_id = payment_methods.id 
		join categories on goods.category_id = categories.id
		join companies on goods.company_id = companies.id
		where orders_cash.client_id = 25465 and orders_cash.on_sale_date between ''01-01-1900'' and ''11-12-2999'';
	'
	) as A(on_sale_date date, category text, company text, model text, sale_amount numeric(12,2), payment_method text)
)
order by on_sale_date, category, company, model


"Sort  (cost=177.50..180.01 rows=1006 width=148) (actual time=347.740..347.746 rows=8 loops=1)"
"  Sort Key: orders_non_cash.on_sale_date, categories.title, companies.name, goods.model"
"  Sort Method: quicksort  Memory: 26kB"
"  ->  HashAggregate  (cost=117.27..127.33 rows=1006 width=148) (actual time=347.705..347.715 rows=8 loops=1)"
"        ->  Append  (cost=5.17..102.18 rows=1006 width=148) (actual time=0.081..347.671 rows=8 loops=1)"
"              ->  Nested Loop  (cost=5.17..82.11 rows=6 width=91) (actual time=0.078..0.266 rows=5 loops=1)"
"                    ->  Nested Loop  (cost=4.90..80.22 rows=6 width=79) (actual time=0.069..0.213 rows=5 loops=1)"
"                          ->  Nested Loop  (cost=4.75..79.14 rows=6 width=55) (actual time=0.060..0.165 rows=5 loops=1)"
"                                Join Filter: (orders_non_cash.payment_method_id = payment_methods.id)"
"                                Rows Removed by Join Filter: 5"
"                                ->  Nested Loop  (cost=4.75..77.94 rows=6 width=27) (actual time=0.046..0.111 rows=5 loops=1)"
"                                      ->  Bitmap Heap Scan on orders_non_cash  (cost=4.47..28.05 rows=6 width=17) (actual time=0.031..0.044 rows=5 loops=1)"
"                                            Recheck Cond: (client_id = 25465)"
"                                            Filter: ((on_sale_date >= '1900-01-01'::date) AND (on_sale_date <= '2999-12-11'::date))"
"                                            ->  Bitmap Index Scan on orders_non_cash_client_id_idx  (cost=0.00..4.46 rows=6 width=0) (actual time=0.018..0.018 rows=5 loops=1)"
"                                                  Index Cond: (client_id = 25465)"
"                                      ->  Index Scan using goods_id_idx on goods  (cost=0.29..8.30 rows=1 width=18) (actual time=0.006..0.007 rows=1 loops=5)"
"                                            Index Cond: (id = orders_non_cash.goods_id)"
"                                ->  Materialize  (cost=0.00..1.03 rows=2 width=36) (actual time=0.003..0.005 rows=2 loops=5)"
"                                      ->  Seq Scan on payment_methods  (cost=0.00..1.02 rows=2 width=36) (actual time=0.003..0.005 rows=2 loops=1)"
"                          ->  Index Scan using categories_id_idx on categories  (cost=0.15..0.17 rows=1 width=32) (actual time=0.003..0.004 rows=1 loops=5)"
"                                Index Cond: (id = goods.category_id)"
"                    ->  Index Scan using companies_id_idx on companies  (cost=0.28..0.31 rows=1 width=20) (actual time=0.004..0.005 rows=1 loops=5)"
"                          Index Cond: (id = goods.company_id)"
"              ->  Function Scan on dblink a  (cost=0.00..10.00 rows=1000 width=148) (actual time=347.387..347.390 rows=3 loops=1)"



------------
-- 347 мс --
------------
