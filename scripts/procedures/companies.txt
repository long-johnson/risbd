------------
-- insert --
------------

-- B --

drop function if exists initial.insert_companies_B(text, integer, text, text, text, text);
CREATE OR REPLACE FUNCTION initial.insert_companies_B(_name text, _country_id integer, _head_full_name text, _phone text, _address text, _bank_details text) 
RETURNS setof void as $$
DECLARE new_id integer;
DECLARE _count_countries integer;
BEGIN
	set search_path to initial;
	
	-- check for existence of foreign key _country_id in Countries (on server A)
	select check_for_key.count_countries into _count_countries
	from
		public.dblink('host=students.ami.nstu.ru dbname=risbd4 user=risbd4 password=ris14bd4',
		'
			set search_path to initial;
			SELECT count(*)
			FROM countries
			where countries.id = ' || _country_id || ';
		') as check_for_key(count_countries integer);
	if _count_countries = 0
	then
		raise exception 'Foreign key violation (country_id)';
		return;
	end if;
	
	-- get maximal id
	SELECT companies.id into new_id 
	FROM companies
	ORDER BY id DESC 
	LIMIT 1;
	-- new_id is max_id + 1
	new_id := new_id + 1;
	
	-- insert into table B
	insert into companies(id, name, country_id, head_full_name, phone, address, bank_details)
		values(new_id, _name, _country_id, _head_full_name, _phone, _address, _bank_details);
	
	-- insert into table A
	public.dblink_exec('host=students.ami.nstu.ru dbname=risbd4 user=risbd4 password=ris14bd4',
	'
		select * from 
		initial.insert_companies_A(' || new_id || ' ,'' ' || _name || ' '', ' || _country_id || ' ,'' ' || _head_full_name || ' '', '' ' || _phone  || ' '', '' ' ||  _address  || ' '', '' ' ||  _bank_details || ' '');
	');
	
	RETURN;
END;
$$ LANGUAGE plpgsql;



-- A --

drop function if exists initial.insert_companies_A(integer, text, integer, text, text, text, text);
CREATE OR REPLACE FUNCTION initial.insert_companies_A(_id integer, _name text, _country_id integer, _head_full_name text, _phone text, _address text, _bank_details text) 
RETURNS setof void as $$
BEGIN
	set search_path to initial;
	
	-- insert into table A
	insert into companies(id, name, country_id, head_full_name, phone, address, bank_details)
		values(_id, _name, _country_id, _head_full_name, _phone, _address, _bank_details);
	
	RETURN;
END;
$$ LANGUAGE plpgsql;

















------------
-- update --
------------

-- B --

drop function if exists initial.update_companies_B(integer, text, integer, text, text, text, text);
CREATE OR REPLACE FUNCTION initial.update_companies_B(_id integer, _name text, _country_id integer, _head_full_name text, _phone text, _address text, _bank_details text) 
RETURNS setof void as $$
DECLARE _count_countries integer;
BEGIN
	set search_path to initial;
	
	-- check for existence of foreign key _country_id in Countries (on server A)
	select check_for_key.count_countries into _count_countries
	from
		public.dblink('host=students.ami.nstu.ru dbname=risbd4 user=risbd4 password=ris14bd4',
		'
			set search_path to initial;
			SELECT count(*)
			FROM countries
			where countries.id = ' || _country_id || ';
		') as check_for_key(count_countries integer);
	if _count_countries = 0
	then
		raise exception 'Foreign key violation (country_id)';
		return;
	end if;
	
	-- update table B
	update companies
	set companies.name = _name, companies.country_id = _country_id, companies.head_full_name = _head_full_name,
		companies.phone = _phone,  companies.address = _address, companies.bank_details = _bank_details
	where companies.id = _id;
	
	-- update table A
	public.dblink_exec('host=students.ami.nstu.ru dbname=risbd4 user=risbd4 password=ris14bd4',
	'
		select * from 
		initial.update_companies_A(' || _id || ' ,'' ' || _name || ' '', ' || _country_id || ' ,'' ' || _head_full_name || ' '', '' ' || _phone  || ' '', '' ' ||  _address  || ' '', '' ' ||  _bank_details || ' '');
	');
	
	RETURN;
END;
$$ LANGUAGE plpgsql;



-- A --

drop function if exists initial.update_companies_A(integer, text, integer, text, text, text, text);
CREATE OR REPLACE FUNCTION initial.update_companies_A(_id integer, _name text, _country_id integer, _head_full_name text, _phone text, _address text, _bank_details text) 
RETURNS setof void as $$
DECLARE _count_countries integer;
BEGIN
	set search_path to initial;
	
	-- update table A
	update companies
	set companies.name = _name, companies.country_id = _country_id, companies.head_full_name = _head_full_name,
		companies.phone = _phone,  companies.address = _address, companies.bank_details = _bank_details
	where companies.id = _id;
	
	RETURN;
END;
$$ LANGUAGE plpgsql;

















------------
-- delete --
------------

-- dependency for goods.country_id - automatic

-- B --

drop function if exists initial.delete_companies_B(integer);
CREATE OR REPLACE FUNCTION initial.delete_companies_B(_id integer) 
RETURNS setof void as $$
BEGIN
	set search_path to initial;
	
	-- delete from table B
	delete from companies
	where companies.id = _id;
	
	-- delete from table A
	public.dblink_exec('host=students.ami.nstu.ru dbname=risbd4 user=risbd4 password=ris14bd4',
	'
		select * from 
		initial.delete_companies_A(' || _id || ');
	');
	
	RETURN;
END;
$$ LANGUAGE plpgsql;


-- A --

drop function if exists initial.delete_companies_A(integer);
CREATE OR REPLACE FUNCTION initial.delete_companies_A(_id integer) 
RETURNS setof void as $$
BEGIN
	set search_path to initial;
	
	-- delete from table A
	delete from companies
	where companies.id = _id;
	
	RETURN;
END;
$$ LANGUAGE plpgsql;