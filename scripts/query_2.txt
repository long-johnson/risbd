*************
* 2 запрос: *
*************
Для указанного месяца (заданного номером месяца) получить список всех продаж, каждая из которых совершена за наличный расчёт на сумму не менее 1000.
Для каждой продажи должны быть указаны: дата, категория товара, название фирмы, модель, сумма продажи, тип поставки.
отсортировать список следующим образом: дата, категория, название фирмы, модель.
ограничение на максимальное время выполнения запроса:
@ в приложении - 480 мс;
@ используя explain analyze - 530 мс.
-------------------------------------------------------------------------------------------------------------------------------------------------------

(1 вариант)

-- наивный запрос

SET search_path TO initial;
select orders.on_sale_date, categories.title, companies.name, goods.model, orders.sale_amount, sale_types.title
from orders
join goods on orders.goods_id = goods.id
join categories on goods.category_id = categories.id
join companies on goods.company_id = companies.id
join sale_types on orders.sale_type_id = sale_types.id
where orders.payment_method_id = 2 and orders.sale_amount >= 1000 and date_part('month',orders.on_sale_date) = 12
order by orders.on_sale_date, categories.title, companies.name, goods.model;

"Sort  (cost=29146.66..29148.78 rows=851 width=91) (actual time=794.565..832.172 rows=14253 loops=1)"
"  Sort Key: orders.on_sale_date, categories.title, companies.name, goods.model"
"  Sort Method: external merge  Disk: 1168kB"
"  ->  Hash Join  (cost=5836.49..29105.24 rows=851 width=91) (actual time=119.715..704.766 rows=14253 loops=1)"
"        Hash Cond: (orders.sale_type_id = sale_types.id)"
"        ->  Hash Join  (cost=5835.44..29092.50 rows=851 width=63) (actual time=119.611..656.281 rows=14253 loops=1)"
"              Hash Cond: (goods.company_id = companies.id)"
"              ->  Hash Join  (cost=5799.99..29045.34 rows=851 width=51) (actual time=115.113..603.108 rows=14253 loops=1)"
"                    Hash Cond: (goods.category_id = categories.id)"
"                    ->  Hash Join  (cost=5789.52..29023.17 rows=851 width=27) (actual time=113.370..553.624 rows=14253 loops=1)"
"                          Hash Cond: (orders.goods_id = goods.id)"
"                          ->  Bitmap Heap Scan on orders  (cost=4642.76..27855.14 rows=851 width=17) (actual time=49.264..425.005 rows=14253 loops=1)"
"                                Recheck Cond: (payment_method_id = 2)"
"                                Rows Removed by Index Recheck: 119069"
"                                Filter: ((sale_amount >= 1000::numeric) AND (date_part('month'::text, (on_sale_date)::timestamp without time zone) = 12::double precision))"
"                                Rows Removed by Filter: 235680"
"                                ->  Bitmap Index Scan on fki_orders_payment_method_id  (cost=0.00..4642.55 rows=250950 width=0) (actual time=47.342..47.342 rows=249933 loops=1)"
"                                      Index Cond: (payment_method_id = 2)"
"                          ->  Hash  (cost=1019.67..1019.67 rows=10167 width=18) (actual time=64.061..64.061 rows=10167 loops=1)"
"                                Buckets: 1024  Batches: 1  Memory Usage: 512kB"
"                                ->  Seq Scan on goods  (cost=0.00..1019.67 rows=10167 width=18) (actual time=1.203..37.896 rows=10167 loops=1)"
"                    ->  Hash  (cost=6.32..6.32 rows=332 width=32) (actual time=1.703..1.703 rows=332 loops=1)"
"                          Buckets: 1024  Batches: 1  Memory Usage: 22kB"
"                          ->  Seq Scan on categories  (cost=0.00..6.32 rows=332 width=32) (actual time=0.010..0.738 rows=332 loops=1)"
"              ->  Hash  (cost=27.98..27.98 rows=598 width=20) (actual time=4.463..4.463 rows=598 loops=1)"
"                    Buckets: 1024  Batches: 1  Memory Usage: 32kB"
"                    ->  Seq Scan on companies  (cost=0.00..27.98 rows=598 width=20) (actual time=0.009..2.317 rows=598 loops=1)"
"        ->  Hash  (cost=1.02..1.02 rows=2 width=36) (actual time=0.064..0.064 rows=2 loops=1)"
"              Buckets: 1024  Batches: 1  Memory Usage: 1kB"
"              ->  Seq Scan on sale_types  (cost=0.00..1.02 rows=2 width=36) (actual time=0.044..0.049 rows=2 loops=1)"

------------
-- 832 мс --
------------













(2 вариант)

-- добавить столбец "месяц" + по нему индекс
 
alter table orders add column on_sale_month integer;
update orders 
  set on_sale_month = date_part('month', on_sale_date);
create index on orders (on_sale_month);

-- новый запрос:

select orders.on_sale_date, categories.title, companies.name, goods.model, orders.sale_amount, sale_types.title
from orders
join goods on orders.goods_id = goods.id
join categories on goods.category_id = categories.id
join companies on goods.company_id = companies.id
join sale_types on orders.sale_type_id = sale_types.id
where orders.payment_method_id = 2 and orders.sale_amount >= 1000 and on_sale_month = 1
order by orders.on_sale_date, categories.title, companies.name, goods.model;

"Sort  (cost=35020.57..35055.97 rows=14161 width=91) (actual time=480.776..517.745 rows=14495 loops=1)"
"  Sort Key: orders.on_sale_date, categories.title, companies.name, goods.model"
"  Sort Method: external merge  Disk: 1184kB"
"  ->  Hash Join  (cost=1962.69..33316.20 rows=14161 width=91) (actual time=48.580..389.858 rows=14495 loops=1)"
"        Hash Cond: (orders.sale_type_id = sale_types.id)"
"        ->  Hash Join  (cost=1961.65..33120.44 rows=14161 width=63) (actual time=48.509..335.934 rows=14495 loops=1)"
"              Hash Cond: (goods.company_id = companies.id)"
"              ->  Hash Join  (cost=1926.19..32890.27 rows=14161 width=51) (actual time=46.445..285.093 rows=14495 loops=1)"
"                    Hash Cond: (goods.category_id = categories.id)"
"                    ->  Hash Join  (cost=1915.72..32685.08 rows=14161 width=27) (actual time=45.323..235.332 rows=14495 loops=1)"
"                          Hash Cond: (orders.goods_id = goods.id)"
"                          ->  Bitmap Heap Scan on orders  (cost=768.96..31184.30 rows=14161 width=17) (actual time=8.243..137.620 rows=14495 loops=1)"
"                                Recheck Cond: (on_sale_month = 1)"
"                                Rows Removed by Index Recheck: 209307"
"                                Filter: ((sale_amount >= 1000::numeric) AND (payment_method_id = 2))"
"                                Rows Removed by Filter: 28164"
"                                ->  Bitmap Index Scan on orders_on_sale_month_idx  (cost=0.00..765.42 rows=41200 width=0) (actual time=7.063..7.063 rows=42659 loops=1)"
"                                      Index Cond: (on_sale_month = 1)"
"                          ->  Hash  (cost=1019.67..1019.67 rows=10167 width=18) (actual time=37.009..37.009 rows=10167 loops=1)"
"                                Buckets: 1024  Batches: 1  Memory Usage: 512kB"
"                                ->  Seq Scan on goods  (cost=0.00..1019.67 rows=10167 width=18) (actual time=0.072..17.805 rows=10167 loops=1)"
"                    ->  Hash  (cost=6.32..6.32 rows=332 width=32) (actual time=1.077..1.077 rows=332 loops=1)"
"                          Buckets: 1024  Batches: 1  Memory Usage: 22kB"
"                          ->  Seq Scan on categories  (cost=0.00..6.32 rows=332 width=32) (actual time=0.005..0.489 rows=332 loops=1)"
"              ->  Hash  (cost=27.98..27.98 rows=598 width=20) (actual time=2.022..2.022 rows=598 loops=1)"
"                    Buckets: 1024  Batches: 1  Memory Usage: 32kB"
"                    ->  Seq Scan on companies  (cost=0.00..27.98 rows=598 width=20) (actual time=0.003..0.944 rows=598 loops=1)"
"        ->  Hash  (cost=1.02..1.02 rows=2 width=36) (actual time=0.022..0.022 rows=2 loops=1)"
"              Buckets: 1024  Batches: 1  Memory Usage: 1kB"
"              ->  Seq Scan on sale_types  (cost=0.00..1.02 rows=2 width=36) (actual time=0.010..0.013 rows=2 loops=1)"

------------
-- 517 мс --
------------





















(3 вариант)

-- разобьем таблицу "orders" на две таблицы: "orders_cash" (сервер А) и "orders_non_cash" (сервер B)

drop table if exists orders_cash;

create table orders_cash as(
	select *
	from orders
	where orders.payment_method_id = 2
);

ALTER TABLE orders_cash ADD PRIMARY KEY (id);
ALTER TABLE orders_cash ADD FOREIGN KEY (goods_id) REFERENCES goods(id);
ALTER TABLE orders_cash ADD FOREIGN KEY (client_id) REFERENCES clients(id);
ALTER TABLE orders_cash ADD FOREIGN KEY (payment_method_id) REFERENCES payment_methods(id);
ALTER TABLE orders_cash ADD FOREIGN KEY (sale_type_id) REFERENCES sale_types(id);

create INDEX ON orders_cash(id);
create INDEX ON orders_cash(on_sale_date);
create INDEX ON orders_cash(on_sale_month);
create INDEX ON orders_cash(goods_id);
create INDEX ON orders_cash(client_id);
   
   
-- выполним запрос

select orders_cash.on_sale_date, categories.title, companies.name, goods.model, orders_cash.sale_amount, sale_types.title
from orders_cash
join goods on orders_cash.goods_id = goods.id
join categories on goods.category_id = categories.id
join companies on goods.company_id = companies.id
join sale_types on orders_cash.sale_type_id = sale_types.id
where orders_cash.sale_amount >= 1000 and on_sale_month = 1
order by orders_cash.on_sale_date, categories.title, companies.name, goods.model;

"Sort  (cost=11643.17..11679.32 rows=14459 width=91) (actual time=363.917..403.054 rows=14495 loops=1)"
"  Sort Key: orders_cash.on_sale_date, categories.title, companies.name, goods.model"
"  Sort Method: external merge  Disk: 1184kB"
"  ->  Hash Join  (cost=1878.50..9902.08 rows=14459 width=91) (actual time=144.680..283.255 rows=14495 loops=1)"
"        Hash Cond: (orders_cash.sale_type_id = sale_types.id)"
"        ->  Hash Join  (cost=1877.45..9702.22 rows=14459 width=63) (actual time=144.634..240.187 rows=14495 loops=1)"
"              Hash Cond: (orders_cash.goods_id = goods.id)"
"              ->  Bitmap Heap Scan on orders_cash  (cost=405.18..7868.47 rows=14459 width=17) (actual time=4.925..48.330 rows=14495 loops=1)"
"                    Recheck Cond: (on_sale_month = 1)"
"                    Filter: (sale_amount >= 1000::numeric)"
"                    Rows Removed by Filter: 6929"
"                    ->  Bitmap Index Scan on fki_orders_cash_on_sale_month  (cost=0.00..401.56 rows=21486 width=0) (actual time=3.381..3.381 rows=21424 loops=1)"
"                          Index Cond: (on_sale_month = 1)"
"              ->  Hash  (cost=1345.19..1345.19 rows=10167 width=54) (actual time=139.664..139.664 rows=10167 loops=1)"
"                    Buckets: 1024  Batches: 1  Memory Usage: 834kB"
"                    ->  Hash Join  (cost=45.93..1345.19 rows=10167 width=54) (actual time=5.013..114.713 rows=10167 loops=1)"
"                          Hash Cond: (goods.company_id = companies.id)"
"                          ->  Hash Join  (cost=10.47..1169.94 rows=10167 width=42) (actual time=1.911..68.035 rows=10167 loops=1)"
"                                Hash Cond: (goods.category_id = categories.id)"
"                                ->  Seq Scan on goods  (cost=0.00..1019.67 rows=10167 width=18) (actual time=0.316..21.418 rows=10167 loops=1)"
"                                ->  Hash  (cost=6.32..6.32 rows=332 width=32) (actual time=1.577..1.577 rows=332 loops=1)"
"                                      Buckets: 1024  Batches: 1  Memory Usage: 22kB"
"                                      ->  Seq Scan on categories  (cost=0.00..6.32 rows=332 width=32) (actual time=0.007..0.766 rows=332 loops=1)"
"                          ->  Hash  (cost=27.98..27.98 rows=598 width=20) (actual time=3.087..3.087 rows=598 loops=1)"
"                                Buckets: 1024  Batches: 1  Memory Usage: 32kB"
"                                ->  Seq Scan on companies  (cost=0.00..27.98 rows=598 width=20) (actual time=0.004..1.609 rows=598 loops=1)"
"        ->  Hash  (cost=1.02..1.02 rows=2 width=36) (actual time=0.028..0.028 rows=2 loops=1)"
"              Buckets: 1024  Batches: 1  Memory Usage: 1kB"
"              ->  Seq Scan on sale_types  (cost=0.00..1.02 rows=2 width=36) (actual time=0.011..0.015 rows=2 loops=1)"

------------
-- 400 мс --
------------
